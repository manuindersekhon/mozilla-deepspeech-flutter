// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Dart bindings of the Mozilla Deepspeech library
class deepspech_FFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  deepspech_FFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  deepspech_FFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief An object providing an interface to a trained DeepSpeech model.
  ///
  /// @param aModelPath The path to the frozen model graph.
  /// @param[out] retval a ModelState pointer
  ///
  /// @return Zero on success, non-zero on failure.
  int DS_CreateModel(
    ffi.Pointer<ffi.Char> aModelPath,
    ffi.Pointer<ffi.Pointer<ModelState>> retval,
  ) {
    return _DS_CreateModel(
      aModelPath,
      retval,
    );
  }

  late final _DS_CreateModelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ModelState>>)>>('DS_CreateModel');
  late final _DS_CreateModel = _DS_CreateModelPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ModelState>>)>();

  /// @brief Get beam width value used by the model. If {@link DS_SetModelBeamWidth}
  /// was not called before, will return the default value loaded from the
  /// model file.
  ///
  /// @param aCtx A ModelState pointer created with {@link DS_CreateModel}.
  ///
  /// @return Beam width value used by the model.
  int DS_GetModelBeamWidth(
    ffi.Pointer<ModelState> aCtx,
  ) {
    return _DS_GetModelBeamWidth(
      aCtx,
    );
  }

  late final _DS_GetModelBeamWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ModelState>)>>('DS_GetModelBeamWidth');
  late final _DS_GetModelBeamWidth = _DS_GetModelBeamWidthPtr.asFunction<
      int Function(ffi.Pointer<ModelState>)>();

  /// @brief Set beam width value used by the model.
  ///
  /// @param aCtx A ModelState pointer created with {@link DS_CreateModel}.
  /// @param aBeamWidth The beam width used by the model. A larger beam width value
  /// generates better results at the cost of decoding time.
  ///
  /// @return Zero on success, non-zero on failure.
  int DS_SetModelBeamWidth(
    ffi.Pointer<ModelState> aCtx,
    int aBeamWidth,
  ) {
    return _DS_SetModelBeamWidth(
      aCtx,
      aBeamWidth,
    );
  }

  late final _DS_SetModelBeamWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ModelState>,
              ffi.UnsignedInt)>>('DS_SetModelBeamWidth');
  late final _DS_SetModelBeamWidth = _DS_SetModelBeamWidthPtr.asFunction<
      int Function(ffi.Pointer<ModelState>, int)>();

  /// @brief Return the sample rate expected by a model.
  ///
  /// @param aCtx A ModelState pointer created with {@link DS_CreateModel}.
  ///
  /// @return Sample rate expected by the model for its input.
  int DS_GetModelSampleRate(
    ffi.Pointer<ModelState> aCtx,
  ) {
    return _DS_GetModelSampleRate(
      aCtx,
    );
  }

  late final _DS_GetModelSampleRatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ModelState>)>>(
          'DS_GetModelSampleRate');
  late final _DS_GetModelSampleRate = _DS_GetModelSampleRatePtr.asFunction<
      int Function(ffi.Pointer<ModelState>)>();

  /// @brief Frees associated resources and destroys model object.
  void DS_FreeModel(
    ffi.Pointer<ModelState> ctx,
  ) {
    return _DS_FreeModel(
      ctx,
    );
  }

  late final _DS_FreeModelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ModelState>)>>(
          'DS_FreeModel');
  late final _DS_FreeModel =
      _DS_FreeModelPtr.asFunction<void Function(ffi.Pointer<ModelState>)>();

  /// @brief Enable decoding using an external scorer.
  ///
  /// @param aCtx The ModelState pointer for the model being changed.
  /// @param aScorerPath The path to the external scorer file.
  ///
  /// @return Zero on success, non-zero on failure (invalid arguments).
  int DS_EnableExternalScorer(
    ffi.Pointer<ModelState> aCtx,
    ffi.Pointer<ffi.Char> aScorerPath,
  ) {
    return _DS_EnableExternalScorer(
      aCtx,
      aScorerPath,
    );
  }

  late final _DS_EnableExternalScorerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ModelState>,
              ffi.Pointer<ffi.Char>)>>('DS_EnableExternalScorer');
  late final _DS_EnableExternalScorer = _DS_EnableExternalScorerPtr.asFunction<
      int Function(ffi.Pointer<ModelState>, ffi.Pointer<ffi.Char>)>();

  /// @brief Add a hot-word and its boost.
  ///
  /// @param aCtx The ModelState pointer for the model being changed.
  /// @param word The hot-word.
  /// @param boost The boost.
  ///
  /// @return Zero on success, non-zero on failure (invalid arguments).
  int DS_AddHotWord(
    ffi.Pointer<ModelState> aCtx,
    ffi.Pointer<ffi.Char> word,
    double boost,
  ) {
    return _DS_AddHotWord(
      aCtx,
      word,
      boost,
    );
  }

  late final _DS_AddHotWordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ModelState>, ffi.Pointer<ffi.Char>,
              ffi.Float)>>('DS_AddHotWord');
  late final _DS_AddHotWord = _DS_AddHotWordPtr.asFunction<
      int Function(ffi.Pointer<ModelState>, ffi.Pointer<ffi.Char>, double)>();

  /// @brief Remove entry for a hot-word from the hot-words map.
  ///
  /// @param aCtx The ModelState pointer for the model being changed.
  /// @param word The hot-word.
  ///
  /// @return Zero on success, non-zero on failure (invalid arguments).
  int DS_EraseHotWord(
    ffi.Pointer<ModelState> aCtx,
    ffi.Pointer<ffi.Char> word,
  ) {
    return _DS_EraseHotWord(
      aCtx,
      word,
    );
  }

  late final _DS_EraseHotWordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ModelState>,
              ffi.Pointer<ffi.Char>)>>('DS_EraseHotWord');
  late final _DS_EraseHotWord = _DS_EraseHotWordPtr.asFunction<
      int Function(ffi.Pointer<ModelState>, ffi.Pointer<ffi.Char>)>();

  /// @brief Removes all elements from the hot-words map.
  ///
  /// @param aCtx The ModelState pointer for the model being changed.
  ///
  /// @return Zero on success, non-zero on failure (invalid arguments).
  int DS_ClearHotWords(
    ffi.Pointer<ModelState> aCtx,
  ) {
    return _DS_ClearHotWords(
      aCtx,
    );
  }

  late final _DS_ClearHotWordsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ModelState>)>>(
          'DS_ClearHotWords');
  late final _DS_ClearHotWords =
      _DS_ClearHotWordsPtr.asFunction<int Function(ffi.Pointer<ModelState>)>();

  /// @brief Disable decoding using an external scorer.
  ///
  /// @param aCtx The ModelState pointer for the model being changed.
  ///
  /// @return Zero on success, non-zero on failure.
  int DS_DisableExternalScorer(
    ffi.Pointer<ModelState> aCtx,
  ) {
    return _DS_DisableExternalScorer(
      aCtx,
    );
  }

  late final _DS_DisableExternalScorerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ModelState>)>>(
          'DS_DisableExternalScorer');
  late final _DS_DisableExternalScorer = _DS_DisableExternalScorerPtr
      .asFunction<int Function(ffi.Pointer<ModelState>)>();

  /// @brief Set hyperparameters alpha and beta of the external scorer.
  ///
  /// @param aCtx The ModelState pointer for the model being changed.
  /// @param aAlpha The alpha hyperparameter of the decoder. Language model weight.
  /// @param aLMBeta The beta hyperparameter of the decoder. Word insertion weight.
  ///
  /// @return Zero on success, non-zero on failure.
  int DS_SetScorerAlphaBeta(
    ffi.Pointer<ModelState> aCtx,
    double aAlpha,
    double aBeta,
  ) {
    return _DS_SetScorerAlphaBeta(
      aCtx,
      aAlpha,
      aBeta,
    );
  }

  late final _DS_SetScorerAlphaBetaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ModelState>, ffi.Float,
              ffi.Float)>>('DS_SetScorerAlphaBeta');
  late final _DS_SetScorerAlphaBeta = _DS_SetScorerAlphaBetaPtr.asFunction<
      int Function(ffi.Pointer<ModelState>, double, double)>();

  /// @brief Use the DeepSpeech model to convert speech to text.
  ///
  /// @param aCtx The ModelState pointer for the model to use.
  /// @param aBuffer A 16-bit, mono raw audio signal at the appropriate
  /// sample rate (matching what the model was trained on).
  /// @param aBufferSize The number of samples in the audio signal.
  ///
  /// @return The STT result. The user is responsible for freeing the string using
  /// {@link DS_FreeString()}. Returns NULL on error.
  ffi.Pointer<ffi.Char> DS_SpeechToText(
    ffi.Pointer<ModelState> aCtx,
    ffi.Pointer<ffi.Short> aBuffer,
    int aBufferSize,
  ) {
    return _DS_SpeechToText(
      aCtx,
      aBuffer,
      aBufferSize,
    );
  }

  late final _DS_SpeechToTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ModelState>,
              ffi.Pointer<ffi.Short>, ffi.UnsignedInt)>>('DS_SpeechToText');
  late final _DS_SpeechToText = _DS_SpeechToTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ModelState>, ffi.Pointer<ffi.Short>, int)>();

  /// @brief Use the DeepSpeech model to convert speech to text and output results
  /// including metadata.
  ///
  /// @param aCtx The ModelState pointer for the model to use.
  /// @param aBuffer A 16-bit, mono raw audio signal at the appropriate
  /// sample rate (matching what the model was trained on).
  /// @param aBufferSize The number of samples in the audio signal.
  /// @param aNumResults The maximum number of CandidateTranscript structs to return. Returned value might be smaller than this.
  ///
  /// @return Metadata struct containing multiple CandidateTranscript structs. Each
  /// transcript has per-token metadata including timing information. The
  /// user is responsible for freeing Metadata by calling {@link DS_FreeMetadata()}.
  /// Returns NULL on error.
  ffi.Pointer<Metadata> DS_SpeechToTextWithMetadata(
    ffi.Pointer<ModelState> aCtx,
    ffi.Pointer<ffi.Short> aBuffer,
    int aBufferSize,
    int aNumResults,
  ) {
    return _DS_SpeechToTextWithMetadata(
      aCtx,
      aBuffer,
      aBufferSize,
      aNumResults,
    );
  }

  late final _DS_SpeechToTextWithMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Metadata> Function(
              ffi.Pointer<ModelState>,
              ffi.Pointer<ffi.Short>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('DS_SpeechToTextWithMetadata');
  late final _DS_SpeechToTextWithMetadata =
      _DS_SpeechToTextWithMetadataPtr.asFunction<
          ffi.Pointer<Metadata> Function(
              ffi.Pointer<ModelState>, ffi.Pointer<ffi.Short>, int, int)>();

  /// @brief Create a new streaming inference state. The streaming state returned
  /// by this function can then be passed to {@link DS_FeedAudioContent()}
  /// and {@link DS_FinishStream()}.
  ///
  /// @param aCtx The ModelState pointer for the model to use.
  /// @param[out] retval an opaque pointer that represents the streaming state. Can
  /// be NULL if an error occurs.
  ///
  /// @return Zero for success, non-zero on failure.
  int DS_CreateStream(
    ffi.Pointer<ModelState> aCtx,
    ffi.Pointer<ffi.Pointer<StreamingState>> retval,
  ) {
    return _DS_CreateStream(
      aCtx,
      retval,
    );
  }

  late final _DS_CreateStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ModelState>,
              ffi.Pointer<ffi.Pointer<StreamingState>>)>>('DS_CreateStream');
  late final _DS_CreateStream = _DS_CreateStreamPtr.asFunction<
      int Function(
          ffi.Pointer<ModelState>, ffi.Pointer<ffi.Pointer<StreamingState>>)>();

  /// @brief Feed audio samples to an ongoing streaming inference.
  ///
  /// @param aSctx A streaming state pointer returned by {@link DS_CreateStream()}.
  /// @param aBuffer An array of 16-bit, mono raw audio samples at the
  /// appropriate sample rate (matching what the model was trained on).
  /// @param aBufferSize The number of samples in @p aBuffer.
  void DS_FeedAudioContent(
    ffi.Pointer<StreamingState> aSctx,
    ffi.Pointer<ffi.Short> aBuffer,
    int aBufferSize,
  ) {
    return _DS_FeedAudioContent(
      aSctx,
      aBuffer,
      aBufferSize,
    );
  }

  late final _DS_FeedAudioContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StreamingState>, ffi.Pointer<ffi.Short>,
              ffi.UnsignedInt)>>('DS_FeedAudioContent');
  late final _DS_FeedAudioContent = _DS_FeedAudioContentPtr.asFunction<
      void Function(
          ffi.Pointer<StreamingState>, ffi.Pointer<ffi.Short>, int)>();

  /// @brief Compute the intermediate decoding of an ongoing streaming inference.
  ///
  /// @param aSctx A streaming state pointer returned by {@link DS_CreateStream()}.
  ///
  /// @return The STT intermediate result. The user is responsible for freeing the
  /// string using {@link DS_FreeString()}.
  ffi.Pointer<ffi.Char> DS_IntermediateDecode(
    ffi.Pointer<StreamingState> aSctx,
  ) {
    return _DS_IntermediateDecode(
      aSctx,
    );
  }

  late final _DS_IntermediateDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StreamingState>)>>('DS_IntermediateDecode');
  late final _DS_IntermediateDecode = _DS_IntermediateDecodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StreamingState>)>();

  /// @brief Compute the intermediate decoding of an ongoing streaming inference,
  /// return results including metadata.
  ///
  /// @param aSctx A streaming state pointer returned by {@link DS_CreateStream()}.
  /// @param aNumResults The number of candidate transcripts to return.
  ///
  /// @return Metadata struct containing multiple candidate transcripts. Each transcript
  /// has per-token metadata including timing information. The user is
  /// responsible for freeing Metadata by calling {@link DS_FreeMetadata()}.
  /// Returns NULL on error.
  ffi.Pointer<Metadata> DS_IntermediateDecodeWithMetadata(
    ffi.Pointer<StreamingState> aSctx,
    int aNumResults,
  ) {
    return _DS_IntermediateDecodeWithMetadata(
      aSctx,
      aNumResults,
    );
  }

  late final _DS_IntermediateDecodeWithMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Metadata> Function(ffi.Pointer<StreamingState>,
              ffi.UnsignedInt)>>('DS_IntermediateDecodeWithMetadata');
  late final _DS_IntermediateDecodeWithMetadata =
      _DS_IntermediateDecodeWithMetadataPtr.asFunction<
          ffi.Pointer<Metadata> Function(ffi.Pointer<StreamingState>, int)>();

  /// @brief Compute the final decoding of an ongoing streaming inference and return
  /// the result. Signals the end of an ongoing streaming inference.
  ///
  /// @param aSctx A streaming state pointer returned by {@link DS_CreateStream()}.
  ///
  /// @return The STT result. The user is responsible for freeing the string using
  /// {@link DS_FreeString()}.
  ///
  /// @note This method will free the state pointer (@p aSctx).
  ffi.Pointer<ffi.Char> DS_FinishStream(
    ffi.Pointer<StreamingState> aSctx,
  ) {
    return _DS_FinishStream(
      aSctx,
    );
  }

  late final _DS_FinishStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StreamingState>)>>('DS_FinishStream');
  late final _DS_FinishStream = _DS_FinishStreamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StreamingState>)>();

  /// @brief Compute the final decoding of an ongoing streaming inference and return
  /// results including metadata. Signals the end of an ongoing streaming
  /// inference.
  ///
  /// @param aSctx A streaming state pointer returned by {@link DS_CreateStream()}.
  /// @param aNumResults The number of candidate transcripts to return.
  ///
  /// @return Metadata struct containing multiple candidate transcripts. Each transcript
  /// has per-token metadata including timing information. The user is
  /// responsible for freeing Metadata by calling {@link DS_FreeMetadata()}.
  /// Returns NULL on error.
  ///
  /// @note This method will free the state pointer (@p aSctx).
  ffi.Pointer<Metadata> DS_FinishStreamWithMetadata(
    ffi.Pointer<StreamingState> aSctx,
    int aNumResults,
  ) {
    return _DS_FinishStreamWithMetadata(
      aSctx,
      aNumResults,
    );
  }

  late final _DS_FinishStreamWithMetadataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Metadata> Function(ffi.Pointer<StreamingState>,
              ffi.UnsignedInt)>>('DS_FinishStreamWithMetadata');
  late final _DS_FinishStreamWithMetadata =
      _DS_FinishStreamWithMetadataPtr.asFunction<
          ffi.Pointer<Metadata> Function(ffi.Pointer<StreamingState>, int)>();

  /// @brief Destroy a streaming state without decoding the computed logits. This
  /// can be used if you no longer need the result of an ongoing streaming
  /// inference and don't want to perform a costly decode operation.
  ///
  /// @param aSctx A streaming state pointer returned by {@link DS_CreateStream()}.
  ///
  /// @note This method will free the state pointer (@p aSctx).
  void DS_FreeStream(
    ffi.Pointer<StreamingState> aSctx,
  ) {
    return _DS_FreeStream(
      aSctx,
    );
  }

  late final _DS_FreeStreamPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<StreamingState>)>>(
      'DS_FreeStream');
  late final _DS_FreeStream = _DS_FreeStreamPtr.asFunction<
      void Function(ffi.Pointer<StreamingState>)>();

  /// @brief Free memory allocated for metadata information.
  void DS_FreeMetadata(
    ffi.Pointer<Metadata> m,
  ) {
    return _DS_FreeMetadata(
      m,
    );
  }

  late final _DS_FreeMetadataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Metadata>)>>(
          'DS_FreeMetadata');
  late final _DS_FreeMetadata =
      _DS_FreeMetadataPtr.asFunction<void Function(ffi.Pointer<Metadata>)>();

  /// @brief Free a char* string returned by the DeepSpeech API.
  void DS_FreeString(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _DS_FreeString(
      str,
    );
  }

  late final _DS_FreeStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'DS_FreeString');
  late final _DS_FreeString =
      _DS_FreeStringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// @brief Returns the version of this library. The returned version is a semantic
  /// version (SemVer 2.0.0). The string returned must be freed with {@link DS_FreeString()}.
  ///
  /// @return The version string.
  ffi.Pointer<ffi.Char> DS_Version() {
    return _DS_Version();
  }

  late final _DS_VersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'DS_Version');
  late final _DS_Version =
      _DS_VersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// @brief Returns a textual description corresponding to an error code.
  /// The string returned must be freed with @{link DS_FreeString()}.
  ///
  /// @return The error description.
  ffi.Pointer<ffi.Char> DS_ErrorCodeToErrorMessage(
    int aErrorCode,
  ) {
    return _DS_ErrorCodeToErrorMessage(
      aErrorCode,
    );
  }

  late final _DS_ErrorCodeToErrorMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'DS_ErrorCodeToErrorMessage');
  late final _DS_ErrorCodeToErrorMessage = _DS_ErrorCodeToErrorMessagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();
}

class ModelState extends ffi.Opaque {}

class StreamingState extends ffi.Opaque {}

/// @brief Stores text of an individual token, along with its timing information
class TokenMetadata extends ffi.Struct {
  /// The text corresponding to this token
  external ffi.Pointer<ffi.Char> text;

  /// Position of the token in units of 20ms
  @ffi.UnsignedInt()
  external int timestep;

  /// Position of the token in seconds
  @ffi.Float()
  external double start_time;
}

/// @brief A single transcript computed by the model, including a confidence
/// value and the metadata for its constituent tokens.
class CandidateTranscript extends ffi.Struct {
  /// Array of TokenMetadata objects
  external ffi.Pointer<TokenMetadata> tokens;

  /// Size of the tokens array
  @ffi.UnsignedInt()
  external int num_tokens;

  /// Approximated confidence value for this transcript. This is roughly the
  /// sum of the acoustic model logit values for each timestep/character that
  /// contributed to the creation of this transcript.
  @ffi.Double()
  external double confidence;
}

/// @brief An array of CandidateTranscript objects computed by the model.
class Metadata extends ffi.Struct {
  /// Array of CandidateTranscript objects
  external ffi.Pointer<CandidateTranscript> transcripts;

  /// Size of the transcripts array
  @ffi.UnsignedInt()
  external int num_transcripts;
}

abstract class DeepSpeech_Error_Codes {
  static const int DS_ERR_OK = 0;
  static const int DS_ERR_NO_MODEL = 4096;
  static const int DS_ERR_INVALID_ALPHABET = 8192;
  static const int DS_ERR_INVALID_SHAPE = 8193;
  static const int DS_ERR_INVALID_SCORER = 8194;
  static const int DS_ERR_MODEL_INCOMPATIBLE = 8195;
  static const int DS_ERR_SCORER_NOT_ENABLED = 8196;
  static const int DS_ERR_SCORER_UNREADABLE = 8197;
  static const int DS_ERR_SCORER_INVALID_LM = 8198;
  static const int DS_ERR_SCORER_NO_TRIE = 8199;
  static const int DS_ERR_SCORER_INVALID_TRIE = 8200;
  static const int DS_ERR_SCORER_VERSION_MISMATCH = 8201;
  static const int DS_ERR_FAIL_INIT_MMAP = 12288;
  static const int DS_ERR_FAIL_INIT_SESS = 12289;
  static const int DS_ERR_FAIL_INTERPRETER = 12290;
  static const int DS_ERR_FAIL_RUN_SESS = 12291;
  static const int DS_ERR_FAIL_CREATE_STREAM = 12292;
  static const int DS_ERR_FAIL_READ_PROTOBUF = 12293;
  static const int DS_ERR_FAIL_CREATE_SESS = 12294;
  static const int DS_ERR_FAIL_CREATE_MODEL = 12295;
  static const int DS_ERR_FAIL_INSERT_HOTWORD = 12296;
  static const int DS_ERR_FAIL_CLEAR_HOTWORD = 12297;
  static const int DS_ERR_FAIL_ERASE_HOTWORD = 12304;
}
